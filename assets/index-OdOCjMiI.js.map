{"version":3,"mappings":"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","names":["routes","path","component","__vitePreload","import","__VITE_PRELOAD__","SIGNATURE_CLEAR_ALL","SIGNATURE_SAVE","DRAWER_TOGGLE","REFERENCE_INIT","REFERENCE_FOUND","REFERENCE_NOT_FOUND","REFERENCE_CLEAR","REFERENCE_GET","TOAST_TRIGGER","PAGE_VISIT","polyglots","Map","locale","values","es","options","forEach","lang","polyglot","Polyglot","extend","set","t","key","count","_a","get","trim","smart_count","translate","VERSION","url","uri","window","apiHost","startsWith","getCompanyGlobalData","async","companyId","cacheKey","cached","cache","console","log","r","fetch","method","headers","Accept","credentials","ok","Error","status","response","json","empresa","data","error","message","getVersion","getApiHost","host","locationRegex","location","hostname","match","length","ToastSuccess","ToastError","isAuthenticated","handleApplicationLoadingState","loggedIn","loading","PineconeRouter","context","route","name","getAuthenticatedUser","authenticate","username","password","clear","body","URLSearchParams","statusText","setTimeout","user","sa","identify","usuario","warn","success","dispatchEvent","CustomEvent","detail","msg","toString","level","logout","posthog","reset","localStorage","removeItem","render","module","componentModule","default","module_default","styles","template","html","defaultComponentSelector","selector","app","document","querySelector","defaultComponent","Alpine","$data","Promise","all","map","content","toast","resolve","main","then","info","init","dsn","integrations","Sentry.browserTracingIntegration","Sentry.replayIntegration","tracesSampleRate","tracePropagationTargets","replaysSessionSampleRate","replaysOnErrorSampleRate","api_host","person_profiles","innerHTML","plugin","resize","magic","start","setInterval","keepAlive","currentVersion","sessionStorage","getItem","setItem","addEventListener","href","handleVersion","authenticationMiddleware"],"ignoreList":[],"sources":["../../src/routes.ts","../../src/models/events.ts","../../src/services/locale.service.ts","../../src/services/api.service.ts","../../src/models/toast.ts","../../src/services/auth.service.ts","../../src/main.ts"],"sourcesContent":["export type Route = {\n    path: string;\n    component: () => Promise<any>;\n};\n\nexport const routes: Route[] = [\n    {\n        path: '/',\n        component: () => import('@/components/pages/home/home.ts'),\n    },\n    {\n        path: '/login',\n        component: () => import('@/components/pages/login/login.ts'),\n    },\n    {\n        path: '/or/list',\n        component: () => import('@/components/pages/work-orders/work-order-list/work-order-list'),\n    },\n    {\n        path: '/or/me',\n        component: () => import('@/components/pages/work-orders/work-order-list/work-order-list'),\n    },\n    {\n        path: '/or/new',\n        component: () => import('@/components/pages/work-orders/work-order-new/work-order-new'),\n    },\n    {\n        path: '/or/:or/details',\n        component: () => import('@/components/pages/work-orders/work-order-edit/work-order-edit'),\n    },\n    {\n        path: '/potencial/new',\n        component: () => import('@/components/pages/presales/presale-new/presale-new.ts'),\n    },\n    {\n        path: '/potencial/list',\n        component: () => import('@/components/pages/presales/presale-list/presale-list.ts'),\n    },\n    {\n        path: '/potencial/edit/:pre',\n        component: () => import('@/components/pages/presales/presale-edit/presale-edit.ts'),\n    },\n    {\n        path: '/isisign',\n        component: () => import('@/components/pages/isisign/isisign.ts'),\n    },\n    {\n        path: 'notfound',\n        component: () => import('@/components/pages/404/404.ts'),\n    },\n];\n","export const SIGNATURE_CLEAR_ALL = 'signature:clear-all';\nexport const SIGNATURE_SAVE = 'signature:save';\n\nexport const DRAWER_TOGGLE = 'drawer:toggle';\n\nexport const REFERENCE_INIT = 'reference:init';\nexport const REFERENCE_FOUND = 'reference:found';\nexport const REFERENCE_NOT_FOUND = 'reference:not-found';\nexport const REFERENCE_CLEAR = 'reference:clear';\nexport const REFERENCE_GET = 'reference:get';\n\nexport const TOAST_TRIGGER = 'toast:trigger';\n\nexport const PAGE_VISIT = 'pinecone:end'; // PineCone router specific event\n","import Polyglot, { type PolyglotOptions } from 'node-polyglot';\nimport es from '../../locales/es.json';\n\nconst polyglots: Map<string, Polyglot> = new Map();\n\n[\n    { locale: 'es', values: es, options: {} as PolyglotOptions },\n    // { locale: 'pt', values: pt, options: {} as PolyglotOptions },\n].forEach((lang) => {\n    const polyglot = new Polyglot(lang.options);\n    polyglot.extend(lang.values);\n    polyglots.set(lang.locale, polyglot);\n});\n\nexport const translate = (key: string, locale: string, count: number = 1): string => {\n    return polyglots.get(locale)?.t(key.trim(), { smart_count: count }) ?? key;\n};\n\nexport const t = (key: string, count: number = 1): string => {\n    // TODO: Get locale from localStorage\n    return translate(key, 'es', count);\n};\n","import { Empresa } from '@/models/empresa';\nimport { PAGE_VISIT } from '@/models/events';\nimport { t } from './locale.service';\n\nconst VERSION = 'version';\n\nexport const url = (uri: string) => {\n    return `${window.apiHost}${uri.startsWith('/') ? uri : `/${uri}`}`;\n};\n\nexport const keepAlive = async () => {\n    setInterval(\n        async () => {\n            try {\n                const r = await fetch(url('/isiWeb/web/v1/keep-alive'), {\n                    method: 'GET',\n                    headers: {\n                        Accept: 'application/json',\n                        'Content-Type': 'application/json',\n                    },\n                    credentials: 'include',\n                });\n\n                console.log('keepAlive@response', r);\n\n                if (!r.ok) {\n                    throw new Error(t(`Keep-Alive response status not OK: ${r.status}`));\n                }\n            } catch (error: any) {\n                console.error('Failed to keep alive', error);\n            }\n        },\n        5 * 60 * 1000, // Run every 5 minutes\n    );\n};\n\n/**\n * @throws Error if the Company is not found\n */\nexport const getCompanyGlobalData = async (companyId: string): Promise<Empresa> => {\n    try {\n        const cacheKey = `_companyGlobalData_${companyId}`;\n        const cached = window.cache.get(cacheKey);\n        if (cached) {\n            console.log('getCompanyGlobalData@cache', cached);\n            return cached as Empresa;\n        }\n        console.log('getCompanyGlobalData@fetch');\n\n        const r = await fetch(url(`/isiWeb/web/v1/empresas/${companyId}/global-data`), {\n            method: 'GET',\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n            },\n            credentials: 'include',\n        });\n\n        if (!r.ok) {\n            throw new Error(t(`Company ${companyId} global data response status not OK: ${r.status}`));\n        }\n\n        const response = await r.json();\n        const empresa = response.data as Empresa;\n\n        if (!empresa) {\n            const error = new Error(`Company ${companyId} global data could not be retrieved`);\n            console.error(error.message, response);\n            throw error;\n        }\n\n        window.cache.set(cacheKey, empresa);\n        console.log('getCompanyGlobalData@cache set', empresa);\n\n        return empresa;\n    } catch (error: any) {\n        console.error('Failed to get company global data', error);\n        throw error;\n    }\n};\n\nexport const handleVersion = async () => {\n    const currentVersion = await getVersion();\n    if (!sessionStorage.getItem(VERSION)) {\n        sessionStorage.setItem(VERSION, currentVersion);\n    }\n\n    console.log('Current version', currentVersion);\n\n    document.addEventListener(PAGE_VISIT, async () => {\n        const currentVersion = await getVersion();\n        console.log('Page visited', window.PineconeRouter.context.path);\n        if (sessionStorage.getItem(VERSION) !== currentVersion) {\n            console.log('Version mismatch, reloading');\n            sessionStorage.setItem(VERSION, currentVersion);\n\n            /**\n             * sessionStorage handles values instantly in memory but there is a delay until they are persisted.\n             * We cannot use \"fake\" redirection using pinecone router to avoid a page reload, which causes\n             * a race condition where the sessionStorage is not available after a page reload.\n             * Therefore, we use window.location.href with a setTimeout to avoid the race condition.\n             * We use 300ms to give the browser time to persist the sessionStorage modifications.\n             */\n            setTimeout(() => {\n                console.log('Redirecting timeout');\n                window.location.href = window.PineconeRouter.context.path;\n            }, 300);\n        }\n    });\n};\n\nconst getVersion = async (): Promise<string> => {\n    try {\n        const r = await fetch('/version.json', {\n            method: 'GET',\n        });\n\n        if (!r.ok) {\n            throw new Error(t(`Version response status not OK: ${r.status}`));\n        }\n\n        return await r.json();\n    } catch (error: any) {\n        console.error('Failed to get version', error);\n        return '';\n    }\n};\n\nexport const getApiHost = (): string => {\n    let host = 'https://dev-api.isiparts.com:8443';\n\n    const locationRegex = window.location.hostname.match(/^(.*?)\\.isiparts\\.com$/i);\n\n    if (locationRegex !== null && locationRegex.length > 1) {\n        host = `https://${locationRegex[1]}-api.isiparts.com:8443`;\n    }\n\n    return host;\n};\n","export const ToastSuccess: ToastLevel = 'success';\nexport const ToastError: ToastLevel = 'error';\nexport const ToastInfo: ToastLevel = 'info';\nexport const ToastWarning: ToastLevel = 'warning';\n\nexport type ToastLevel = 'success' | 'error' | 'info' | 'warning';\n","import { defaultComponent } from '@/main';\nimport { PAGE_VISIT, TOAST_TRIGGER } from '@/models/events';\nimport { ToastError } from '@/models/toast';\nimport { User } from '@/models/user';\nimport posthog from 'posthog-js';\nimport { url } from './api.service';\nimport { t } from './locale.service';\n\n/**\n * Use keep-alive endpoint reponse status to check if the user is authenticated\n */\nexport const isAuthenticated = async (): Promise<boolean> => {\n    const r = await fetch(url('/isiWeb/web/v1/keep-alive'), {\n        credentials: 'include',\n        headers: {\n            'Content-Type': 'application/json',\n            Accept: 'application/json',\n        },\n    });\n\n    return r.ok;\n};\n\nexport const authenticationMiddleware = async () => {\n    console.log('auth@handleAuthenticationRoutes init');\n\n    await handleApplicationLoadingState();\n\n    document.addEventListener(PAGE_VISIT, async () => {\n        console.log('auth@handleAuthenticationRoutes page visit', window.PineconeRouter.context);\n        await handleApplicationLoadingState();\n    });\n};\n\nconst handleApplicationLoadingState = async () => {\n    const loggedIn = await isAuthenticated();\n    console.log('auth@handleAuthenticationRoutes loggedIn', loggedIn);\n\n    defaultComponent().loading = window.PineconeRouter.context.route?.name === '/login' ? false : !loggedIn;\n};\n\n/**\n * @throws Error if the user is not authenticated\n */\nexport const getAuthenticatedUser = async (): Promise<User> => {\n    try {\n        const cacheKey = '_globalData';\n        const cached = window.cache.get(cacheKey);\n\n        if (cached) {\n            console.log('getAuthenticatedUser@cache', cached);\n            return cached as User;\n        }\n\n        console.log('getAuthenticatedUser@fetch');\n\n        const r = await fetch(url('/isiWeb/web/v1/global-data'), {\n            method: 'GET',\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n            },\n            credentials: 'include',\n        });\n\n        console.log('getAuthenticatedUser@response', r);\n\n        if (!r.ok) {\n            throw new Error(t(`Global data response status not OK: ${r.status}`));\n        }\n\n        const response = await r.json();\n\n        console.log('getAuthenticatedUser@response JSON', response);\n\n        const data = response.data;\n\n        if (!data) {\n            const error = new Error('Global data could not be retrieved');\n            console.error(error.message, response);\n            throw error;\n        }\n\n        window.cache.set(cacheKey, data);\n        console.log('getAuthenticatedUser@cache set', data);\n\n        return data as User;\n    } catch (error: any) {\n        console.error('Failed to get global data', error);\n        throw error;\n    }\n};\n\nexport const authenticate = async (\n    username: string,\n    password: string,\n): Promise<{\n    success: boolean;\n    user: User | null;\n    message: string;\n}> => {\n    console.log('auth@authenticate');\n\n    window.cache.clear();\n\n    try {\n        const body = new URLSearchParams();\n        body.set('j_username', username);\n        body.set('j_password', password);\n\n        const r = await fetch(url('/isiWeb/static/auth/j_spring_security_check'), {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body,\n            credentials: 'include',\n        });\n\n        if (!r.ok) {\n            throw new Error(t(r.status === 401 ? 'username_or_password_invalid' : r.statusText));\n        }\n\n        setTimeout(() => {\n            console.log('auth@authenticate ensure cookie is set');\n        }, 300);\n\n        // JSESSIONID is now set\n\n        const user = await getAuthenticatedUser();\n        console.log('authenticate@user', user);\n\n        if (user) {\n            try {\n                posthog.identify(user.usuario, user);\n            } catch (error: any) {\n                console.warn('Posthog identify failed', error);\n            }\n        }\n\n        return {\n            success: user !== null,\n            user,\n            message: r.statusText,\n        };\n    } catch (error: any) {\n        console.warn('auth@authenticate error', error);\n\n        window.dispatchEvent(\n            new CustomEvent(TOAST_TRIGGER, {\n                detail: {\n                    msg: error.toString(),\n                    level: ToastError,\n                },\n            }),\n        );\n\n        return {\n            success: false,\n            user: null,\n            message: error as string,\n        };\n    }\n};\n\nexport const logout = async (): Promise<void> => {\n    console.log('auth@logout');\n\n    const r = await fetch(url('/isiWeb/static/auth/j_spring_security_logout'), {\n        method: 'POST',\n        credentials: 'include',\n    });\n\n    if (r.status !== 200) {\n        throw new Error(t('Logout failed'));\n    }\n\n    setTimeout(() => {\n        console.log('auth@authenticate ensure cookie is unset');\n    }, 300);\n\n    // JSESSIONID is now unset\n\n    try {\n        posthog.reset();\n    } catch (error) {\n        console.warn('Posthog reset failed', error);\n    }\n\n    localStorage.removeItem('_version');\n    window.cache.clear();\n};\n","import './styles.css';\n// @ts-expect-error 7016\nimport resize from '@alpinejs/resize';\nimport * as Sentry from '@sentry/browser';\nimport Alpine, { AlpineComponent } from 'alpinejs';\nimport PineconeRouter from 'pinecone-router';\nimport posthog from 'posthog-js';\nimport { Route, routes } from './routes.ts';\nimport { getApiHost, handleVersion, keepAlive } from './services/api.service.ts';\nimport { authenticationMiddleware } from './services/auth.service.ts';\nimport { t } from './services/locale.service.ts';\n\ndeclare global {\n    interface Window {\n        Alpine: typeof Alpine;\n        apiHost: string;\n        cache: Map<string, any>;\n    }\n}\n\nexport type ComponentModule<T = any> = {\n    name: () => string;\n    styles?: () => Promise<any>;\n    template: () => Promise<{ default: string }>;\n    data: () => AlpineComponent<\n        T & {\n            [key: string]: any;\n            [key: number]: any;\n            [key: symbol]: any;\n        }\n    >;\n};\n\nexport const render = async (module: any, route: string | undefined = undefined) => {\n    const componentModule: ComponentModule = typeof module['default'] !== 'undefined' ? module.default : module;\n    const name = componentModule.name === undefined ? '' : componentModule.name();\n\n    Alpine.data(name, componentModule.data);\n\n    if (componentModule.styles) {\n        await componentModule.styles();\n    }\n\n    if (componentModule.template === undefined) {\n        console.warn('Template not found!', componentModule);\n        return '';\n    }\n\n    const componentTemplate = await componentModule.template();\n    const html = `<div x-data=\"${name}\">${componentTemplate.default}</div>`;\n\n    return route ? `<template x-template x-route=\"${route}\">${html}</template>` : html;\n};\n\nasync function main() {\n    let html: string = '';\n\n    await Promise.all(\n        routes.map(async (route: Route) => {\n            const { path, component } = route;\n            const content = await render(await component(), path);\n\n            html += content;\n        }),\n    );\n\n    // Toast component\n    const toast = await import('@/components/shared/toast/toast.ts');\n    html += await render(toast);\n\n    if (window.cache === undefined) {\n        window.cache = new Map<string, any>();\n    }\n\n    return Promise.resolve(html);\n}\n\nconst defineApiHost = (): void => {\n    console.info('MODE', import.meta.env?.MODE);\n\n    // Development specific settings\n    if (import.meta.env?.MODE === 'development') {\n        console.log('Development environment');\n        window.apiHost = '';\n    }\n\n    // Production specific settings\n    if (import.meta.env?.MODE !== 'development') {\n        window.apiHost = getApiHost();\n\n        // Sentry\n        Sentry.init({\n            dsn: 'https://0825b8d53e7694ba827b2c18d224c96b@o4508256865812480.ingest.de.sentry.io/4508256869613648',\n            integrations: [Sentry.browserTracingIntegration(), Sentry.replayIntegration()],\n            // Tracing\n            tracesSampleRate: 1.0, //  Capture 100% of the transactions\n            // Set 'tracePropagationTargets' to control for which URLs distributed tracing should be enabled\n            tracePropagationTargets: [\n                /^https?:\\/\\/([a-z0-9]+\\.)*isiparts\\.com/,\n                /^https?:\\/\\/([a-z0-9]+\\.)*isiparts\\.pages\\.dev/,\n            ],\n            // Session Replay\n            replaysSessionSampleRate: 1.0, //  Capture 100% of the transactions\n            replaysOnErrorSampleRate: 1.0, // If you're not already sampling the entire session, change the sample rate to 100% when sampling sessions where errors occur.\n        });\n\n        // Posthog\n        posthog.init('phc_3y02C4cuEDWvSdN1HfhBJ7x4eSOooPJVPirZh6azFNt', {\n            api_host: 'https://eu.i.posthog.com',\n            person_profiles: 'identified_only',\n        });\n    }\n};\n\nconst defaultComponentSelector = (selector = '#app') => {\n    const app = document.querySelector<HTMLDivElement>(selector);\n\n    if (!app) {\n        console.error(`${selector} not found!`);\n        throw new Error(`${selector} not found!`);\n    }\n\n    return app;\n};\n\nexport const defaultComponent = (): AlpineComponent<{ loading: boolean }> => {\n    return Alpine.$data(defaultComponentSelector()) as AlpineComponent<{ loading: boolean }>;\n};\n\nmain().then((html) => {\n    defineApiHost();\n\n    const app = defaultComponentSelector();\n\n    app.innerHTML = html;\n\n    Alpine.plugin(PineconeRouter);\n    Alpine.plugin(resize);\n    // Add more Alpine plugins here\n    Alpine.magic('t', () => (key: string, count: number) => {\n        return t(key, count);\n    });\n\n    window.Alpine = Alpine;\n\n    Alpine.start();\n\n    keepAlive();\n    handleVersion();\n    authenticationMiddleware();\n});\n"],"file":"assets/index-OdOCjMiI.js"}