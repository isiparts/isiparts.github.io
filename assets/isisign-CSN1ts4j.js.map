{"version":3,"mappings":"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","names":["PusherChannel","PusherEvent","isisign","name","template","__vitePreload","import","__VITE_PRELOAD__","data","waiting","user","config","loadConfig","signature","signatureImage","signatureWidth","signatureHeight","docs","Map","currentDoc","init","console","log","this","getAuthenticatedUser","error","location","href","handlePusherEvents","$nextTick","async","window","innerHeight","innerWidth","render","addEventListener","SIGNATURE_SAVE","e","_a","detail","key","_b","value","SIGNATURE_CLEAR_ALL","documentSign","pusher","enabled","warn","Pusher","options","connection","bind","states","previous","current","info","reload","channel","subscribe","MOSTRADOR","MOSTRADOR_FIRMA","doc","queue","clear","$dispatch","set","id","nextDoc","MOSTRADOR_CANCELAR","handleSignature","auth","fetch","url","method","headers","Authorization","btoa","usuario","empOmi","Accept","entries","authorization","get","ok","Error","$t","body","JSON","stringify","blob","substring","indexOf","delete","TOAST_TRIGGER","msg","level","ToastSuccess","ToastError","setTimeout","size","Array","from","lastEntry","length","currentDocClient","r","cliente","credentials","response","json","raz"],"ignoreList":[],"sources":["../../src/models/pusher.ts","../../src/components/pages/isisign/isisign.ts"],"sourcesContent":["export enum PusherChannel {\n    MOSTRADOR = 'mostrador',\n}\n\nexport enum PusherEvent {\n    MOSTRADOR_FIRMA = 'mostrador-firma',\n    MOSTRADOR_CANCELAR = 'mostrador-cancelar',\n}\n","import signature from '@/components/shared/signature/signature';\nimport { ComponentModule, render } from '@/main';\nimport { SIGNATURE_CLEAR_ALL, SIGNATURE_SAVE, TOAST_TRIGGER } from '@/models/events';\nimport { Doc } from '@/models/mostrador';\nimport { PusherChannel, PusherEvent } from '@/models/pusher';\nimport { ToastError, ToastSuccess } from '@/models/toast';\nimport { User } from '@/models/user';\nimport { url } from '@/services/api.service';\nimport { getAuthenticatedUser } from '@/services/auth.service';\nimport { Config, loadConfig } from '@/services/config.service';\nimport Pusher from 'pusher-js';\n\nexport default {\n    name: () => 'documentSign',\n    template: () => import('./isisign.html?raw'),\n    data: () => ({\n        waiting: true,\n        user: null as User | null,\n        config: loadConfig(),\n        signature: null as string | null,\n        signatureImage: null as string | null,\n        signatureWidth: 0,\n        signatureHeight: 0,\n        docs: new Map<string, Doc>(),\n        currentDoc: null as Doc | null,\n        async init() {\n            console.log('isisign@init');\n\n            try {\n                this.user = await getAuthenticatedUser();\n            } catch (error) {\n                location.href = '/login?redirect=/isisign';\n            }\n\n            await this.handlePusherEvents();\n\n            this.$nextTick(async () => {\n                // Setup signature\n                const minSignatureHeight = 300;\n                const maxSignatureHeight = 400;\n                const minSignatureWidth = 300;\n                const maxSignatureWidth = 600;\n\n                const signatureHeight = window.innerHeight - 25;\n                const signatureWidth = window.innerWidth - 50;\n\n                this.signatureWidth =\n                    signatureWidth < minSignatureWidth\n                        ? minSignatureWidth\n                        : signatureWidth > maxSignatureWidth\n                          ? maxSignatureWidth\n                          : signatureWidth;\n\n                this.signatureHeight =\n                    signatureHeight < minSignatureHeight\n                        ? minSignatureHeight\n                        : signatureHeight > maxSignatureHeight\n                          ? maxSignatureHeight\n                          : signatureHeight;\n\n                this.signature = await render(signature);\n\n                // @ts-expect-error 2769\n                window.addEventListener(SIGNATURE_SAVE, (e: CustomEvent) => {\n                    const key: string = e.detail?.key as string;\n\n                    if (key === 'mostrador') {\n                        this.signatureImage = e.detail?.value;\n                    }\n                });\n\n                // @ts-expect-error 2769\n                window.addEventListener(SIGNATURE_CLEAR_ALL, (e: CustomEvent) => {\n                    this.signatureImage = null;\n                });\n            });\n        },\n        async handlePusherEvents() {\n            if (!this.config.documentSign.pusher.enabled) {\n                console.warn('Pusher is disabled');\n                return;\n            }\n\n            console.log('Pusher is enabled');\n\n            const pusher = new Pusher(this.config.documentSign.pusher.key, this.config.documentSign.pusher.options);\n\n            /**\n             * @see https://pusher.com/docs/channels/using_channels/connection/#available-states\n             */\n\n            pusher.connection.bind('state_change', (states: any) => {\n                console.log(`Connection state changed from ${states.previous} to ${states.current}`);\n            });\n\n            pusher.connection.bind('error', (error: any) => {\n                console.error('Connection error:', error);\n            });\n\n            pusher.connection.bind('connected', () => {\n                console.info('Connected to Pusher');\n\n                // TEMP\n                /* this.currentDoc = {\n                    id: '2479',\n                    cliente: 2,\n                    doc: 'Documento 2025.ALM.01AL.3',\n                    importe: 431.06,\n                } as Doc;\n                this.waiting = false; */\n                // END TEMP\n            });\n\n            pusher.connection.bind('failed', () => {\n                console.error('Pusher failed');\n                location.reload();\n            });\n\n            const channel = pusher.subscribe(PusherChannel.MOSTRADOR);\n\n            channel.bind(PusherEvent.MOSTRADOR_FIRMA, (doc: Doc) => {\n                if (!this.config.documentSign.queue) {\n                    this.docs.clear();\n                    this.currentDoc = null;\n                    this.signatureImage = null;\n                    this.waiting = true;\n                    this.$dispatch(SIGNATURE_CLEAR_ALL);\n                }\n\n                this.docs.set(doc.id, doc);\n                console.log('Pusher event', this.docs);\n\n                if (this.currentDoc === null) {\n                    this.nextDoc();\n                }\n            });\n\n            channel.bind(PusherEvent.MOSTRADOR_CANCELAR, () => {\n                console.log('Pusher event cancel');\n                this.docs.clear();\n                this.currentDoc = null;\n                this.signatureImage = null;\n                this.waiting = true;\n                this.$dispatch(SIGNATURE_CLEAR_ALL);\n            });\n        },\n        async handleSignature() {\n            try {\n                if (this.currentDoc === null || this.signatureImage === null) {\n                    return;\n                }\n\n                // this.currentDoc.id = '288'; // TEMP\n\n                this.waiting = true;\n\n                // Fetch API to send signature here\n                const auth = await fetch(url(`/isiSign/auth.jsp?doc=${this.currentDoc.id}`), {\n                    // credentials: 'include',\n                    method: 'POST',\n                    headers: {\n                        Authorization: `Basic ${btoa(`${this.user?.usuario || ''}:${this.user?.empOmi || ''}`)}`,\n                        Accept: 'application/json',\n                    },\n                });\n\n                // Iterate through all headers in the auth response\n                for (const [key, value] of auth.headers.entries()) {\n                    console.log(`Header: ${key} = ${value}`);\n                }\n\n                const authorization = auth.headers.get('Authorization') || '';\n                console.log('Authorization', authorization);\n\n                if (!auth.ok || !authorization) {\n                    // @ts-expect-error 2722\n                    throw new Error(this.$t('AUTH.not_authenticated'));\n                }\n\n                const response = await fetch(url('/isiSign/storeSignature.jsp'), {\n                    // credentials: 'include',\n                    method: 'POST',\n                    headers: {\n                        Authorization: authorization,\n                        Accept: 'application/json',\n                        'Content-Type': 'application/json',\n                    },\n                    body: JSON.stringify({\n                        id: this.currentDoc.id,\n                        blob: this.signatureImage.substring(this.signatureImage.indexOf(',') + 1),\n                    }),\n                });\n\n                if (!response.ok) {\n                    throw new Error('Error signing document');\n                }\n\n                console.log('antes', this.docs);\n                this.docs.delete(this.currentDoc.id);\n                console.log('despues', this.docs);\n\n                this.$dispatch(TOAST_TRIGGER, {\n                    msg: `Firma ${this.currentDoc.id} enviada`,\n                    level: ToastSuccess,\n                });\n\n                this.currentDoc = null;\n                this.nextDoc();\n            } catch (error) {\n                console.error(error);\n                this.$dispatch(TOAST_TRIGGER, { msg: error, level: ToastError });\n\n                setTimeout(() => {\n                    this.docs.clear();\n                    this.currentDoc = null;\n                    this.signatureImage = null;\n                    this.$dispatch(SIGNATURE_CLEAR_ALL);\n                    this.waiting = true;\n                    // location.reload();\n                }, 1000); // Ensure error is reported to Sentry\n            }\n        },\n        nextDoc() {\n            if (this.currentDoc !== null || this.docs.size === 0) {\n                return;\n            }\n\n            const entries = Array.from(this.docs.entries());\n            const lastEntry = entries[entries.length - 1];\n            this.currentDoc = lastEntry[1];\n\n            if (this.currentDoc) {\n                this.$dispatch(SIGNATURE_CLEAR_ALL);\n                this.waiting = false;\n            }\n        },\n\n        async currentDocClient(): Promise<string> {\n            if (this.currentDoc === null) {\n                return '';\n            }\n\n            const r = await fetch(url(`/isiWeb/web/v1/empresas/01/clientes?cli:=${this.currentDoc?.cliente}`), {\n                method: 'GET',\n                credentials: 'include',\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                },\n            });\n\n            if (!r.ok) {\n                console.error('Error fetching client');\n                return '';\n            }\n\n            const response = await r.json();\n\n            if (!response.data || response.data.length === 0) {\n                console.error('Client not found');\n                return '';\n            }\n\n            return response.data[0].raz;\n        },\n    }),\n} as ComponentModule<{\n    user: User;\n    config: Config;\n    signatureImage: string | null;\n    docs: Map<string, Doc>;\n    currentDoc: Doc | null;\n    handlePusherEvents: () => Promise<void>;\n    nextDoc: () => void;\n    currentDocClient: () => Promise<string>;\n}>;\n"],"file":"assets/isisign-CSN1ts4j.js"}