{"version":3,"mappings":"khDAAY,IAAAA,OACRA,aAAW,GAAX,WACAA,kBAAgB,GAAhB,gBAFQA,OAAA,ICMZ,MAAeC,EAAA,CACXC,KAAM,IAAM,QACZC,SAAU,IAAMC,GAAA,IAAAC,OAAO,wBAAkBC,IACzCC,KAAM,KAAO,CACTC,SAAS,EACTC,YAAY,EACZ,UAAMC,GACFC,QAAQC,IAAI,oBACNC,KAAKC,mBAGL,MAAAC,QAAmBC,IAEzB,GAAID,EAAY,CACZ,MAAME,EAAY,IAAIC,gBAAgBC,OAAOC,SAASC,QACtDR,KAAKS,QAAQC,SAASN,EAAUO,IAAI,aAAe,IAAG,CAG1DX,KAAKL,QAAUO,CACnB,EAEA,sBAAMD,GAIF,MAAMG,EAAY,IAAIC,gBAAgBC,OAAOC,SAASC,QAGlD,GAFQI,OAAOC,SAAST,EAAUO,IAAI,QAAU,OAExCxB,EAAI2B,cAAe,CAC3Bd,KAAKL,SAAU,QACToB,IAEN,MAAMC,EAAmBZ,EAAUO,IAAI,aAAe,GAChDM,EAAmBb,EAAUO,IAAI,aAAe,SAEhDX,KAAKZ,MAAM4B,EAAUC,EAAQ,CAE3C,EAEA,YAAMC,CAAOC,eACL,IACArB,QAAQC,IAAI,gBACZC,KAAKJ,YAAa,EAGZ,MAAAoB,EAAW,OAAAI,EAAA,OAAAC,EAAAF,EAAEG,aAAF,EAAAD,EAAUL,eAAU,EAAAI,EAAAG,MAE/BN,EAAW,OAAAO,EAAA,OAAAC,EAAAN,EAAEG,aAAF,EAAAG,EAAUR,eAAU,EAAAO,EAAAD,MAEjC,IAACP,IAAaC,EACd,MAAM,IAAIS,MAAM1B,KAAK2B,GAAG,8CAGtB3B,KAAKZ,MAAM4B,EAAUC,SACtBW,GACL9B,QAAQ8B,MAAMA,GACd5B,KAAK6B,UAAUC,EAAe,CAAEC,IAAK/B,KAAK2B,GAAGC,EAAMI,YAAaC,MAAOC,IACvElC,KAAKJ,YAAa,EAE1B,EACA,WAAMR,CAAM4B,EAAkBC,GACpB,MAAAkB,QAAEA,OAASC,EAAMC,iBAAkBC,EAAatB,EAAUC,GAEhEjB,KAAKuC,WAAU,KAGX,GAFQzC,QAAAC,IAAI,wBAAyBqC,IAEhCD,EAID,OAHKnC,KAAA6B,UAAUC,EAAe,CAAEC,IAAK/B,KAAK2B,GAAGU,GAAUJ,MAAOC,SAE9DlC,KAAKJ,YAAa,GAItB,MAAMQ,EAAY,IAAIC,gBAAgBC,OAAOC,SAASC,QACtDR,KAAKS,QAAQC,SAASN,EAAUO,IAAI,aAAe,IAAG,GACzD","names":["SSO","login","name","template","__vitePreload","import","__VITE_PRELOAD__","data","loading","submitting","init","console","log","this","handleSSORequest","isLoggedIn","isAuthenticated","urlParams","URLSearchParams","window","location","search","$router","navigate","get","Number","parseInt","USER_PASSWORD","logout","username","password","submit","e","_b","_a","target","value","_d","_c","Error","$t","error","$dispatch","TOAST_TRIGGER","msg","toString","level","ToastError","success","user","message","authenticate","$nextTick"],"ignoreList":[],"sources":["../../src/models/sso.ts","../../src/components/pages/login/login.ts"],"sourcesContent":["export enum SSO {\n    DISABLED = 0,\n    USER_PASSWORD = 1,\n    // BEARER_TOKEN = 2,\n}\n","import { ComponentModule } from '@/main';\nimport { TOAST_TRIGGER } from '@/models/events';\nimport { SSO } from '@/models/sso';\nimport { ToastError } from '@/models/toast';\nimport { authenticate, isAuthenticated, logout } from '@/services/auth.service';\n\nexport default {\n    name: () => 'login',\n    template: () => import('./login.html?raw'),\n    data: () => ({\n        loading: true,\n        submitting: false,\n        async init() {\n            console.log('login@init');\n            await this.handleSSORequest();\n\n            // There is a middleware that will redirect if the user is authenticated\n            const isLoggedIn = await isAuthenticated();\n\n            if (isLoggedIn) {\n                const urlParams = new URLSearchParams(window.location.search);\n                this.$router.navigate(urlParams.get('redirect') || '/');\n            }\n\n            this.loading = isLoggedIn;\n        },\n\n        async handleSSORequest(): Promise<void> {\n            // This is a placeholder for handling SSO requests\n            // For example, if the SSO is enabled, we can redirect to the SSO page\n\n            const urlParams = new URLSearchParams(window.location.search);\n            const sso = Number.parseInt(urlParams.get('sso') || '0');\n\n            if (sso === SSO.USER_PASSWORD) {\n                this.loading = true;\n                await logout();\n\n                const username: string = urlParams.get('username') ?? '';\n                const password: string = urlParams.get('password') ?? '';\n\n                await this.login(username, password);\n            }\n        },\n\n        async submit(e: SubmitEvent) {\n            try {\n                console.log('login@submit');\n                this.submitting = true;\n\n                /** @ts-expect-error 2339 */\n                const username = e.target?.username?.value;\n                /** @ts-expect-error 2339 */\n                const password = e.target?.password?.value;\n\n                if (!username || !password) {\n                    throw new Error(this.$t('AUTH.username_and_password_required'));\n                }\n\n                await this.login(username, password);\n            } catch (error: any) {\n                console.error(error);\n                this.$dispatch(TOAST_TRIGGER, { msg: this.$t(error.toString()), level: ToastError });\n                this.submitting = false;\n            }\n        },\n        async login(username: string, password: string): Promise<void> {\n            const { success, user, message } = await authenticate(username, password);\n\n            this.$nextTick(() => {\n                console.log('login@isAuthenticated', user);\n\n                if (!success) {\n                    this.$dispatch(TOAST_TRIGGER, { msg: this.$t(message), level: ToastError });\n\n                    this.submitting = false;\n                    return;\n                }\n\n                const urlParams = new URLSearchParams(window.location.search);\n                this.$router.navigate(urlParams.get('redirect') || '/');\n            });\n        },\n    }),\n} as ComponentModule;\n"],"file":"assets/login-DtPvqOs8.js"}