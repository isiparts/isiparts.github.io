{"version":3,"mappings":"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","names":["workOrderList","name","template","__vitePreload","import","__VITE_PRELOAD__","data","user","nav","aside","loading","totalWorkOrders","workOrders","countTodayWorkOrders","countYesterdayWorkOrders","percentageSinceYesterday","countTotalWorkOrders","countPendingWorkOrders","countClosedWorkOrders","progressPercentage","currentTab","init","console","log","this","getAuthenticatedUser","error","location","href","render","loadWorkOrders","_a","$router","context","route","mecs","fetch","url","usuario","credentials","headers","baseUrl","json","mec","fetchUrl","r","_b","loadKpis","message","today","Date","toISOString","split","yesterdayDate","setDate","getDate","yesterday","filter","wo","fecrep","fedoc","length","Math","round","workOrdersByDay","reduce","acc","workOrder","dateKey","sortedDates","Object","keys","sort","a","b","getTime","categories","map","date","dateObj","month","getMonth","getFullYear","options","chart","height","maxWidth","type","fontFamily","dropShadow","enabled","toolbar","show","tooltip","x","fill","gradient","opacityFrom","opacityTo","shade","gradientToColors","dataLabels","stroke","width","grid","strokeDashArray","padding","left","right","top","series","color","xaxis","labels","axisBorder","axisTicks","yaxis","chartSelector","document","getElementById","ApexCharts","async","default","__vite_default__","changeTab"],"ignoreList":[],"sources":["../../src/components/pages/work-orders/work-order-list/work-order-list.ts"],"sourcesContent":["import aside from '@/components/shared/aside/aside';\nimport nav from '@/components/shared/nav/nav';\nimport { ComponentModule, render } from '@/main';\nimport { WorkOrder } from '@/models/or';\nimport { User } from '@/models/user';\nimport { url } from '@/services/api.service';\nimport { getAuthenticatedUser } from '@/services/auth.service';\n\nexport default {\n    name: () => 'workOrders',\n    template: () => import('./work-order-list.html?raw'),\n    data: () => ({\n        user: null as User | null,\n        nav: null as string | null,\n        aside: null as string | null,\n        loading: true,\n\n        totalWorkOrders: [] as WorkOrder[],\n        workOrders: [] as WorkOrder[],\n\n        // KPIs\n        countTodayWorkOrders: -1,\n        countYesterdayWorkOrders: 0,\n        percentageSinceYesterday: -1,\n        countTotalWorkOrders: -1,\n        countPendingWorkOrders: -1,\n        countClosedWorkOrders: -1,\n        progressPercentage: 0,\n\n        currentTab: 0,\n\n        async init() {\n            console.log('work-order-list@init');\n\n            try {\n                this.user = await getAuthenticatedUser();\n            } catch (error) {\n                location.href = '/login?redirect=/or/list';\n            }\n\n            this.nav = await render(nav);\n            this.aside = await render(aside);\n\n            await this.loadWorkOrders();\n        },\n\n        async loadWorkOrders() {\n            this.loading = true;\n\n            try {\n                if (this.$router.context.route?.name === '/or/me') {\n                    const mecs = await fetch(url(`/isiWeb/web/v1/empresas/01/mecanicos?usuario=${this.user.usuario}`), {\n                        credentials: 'include',\n                        headers: {\n                            'Content-Type': 'application/json',\n                        },\n                    });\n\n                    const mecsResponse = await mecs.json();\n\n                    const baseUrl = `/isiWeb/web/v1/empresas/01/ordenes-reparacion?mec=${mecsResponse.data[0].mec}`;\n                    let fetchUrl = '';\n                    switch (this.currentTab) {\n                        case 0:\n                            fetchUrl = baseUrl;\n                            break;\n                        case 1:\n                            fetchUrl = `${baseUrl}&fecrep:eq=`;\n                            break;\n                        case 2:\n                            fetchUrl = `${baseUrl}&fecrep:ne=`;\n                            break;\n                    }\n\n                    const r = await fetch(url(fetchUrl), {\n                        credentials: 'include',\n                        headers: {\n                            'Content-Type': 'application/json',\n                        },\n                    });\n\n                    const response = await r.json();\n\n                    const workOrders = response.data as WorkOrder[];\n\n                    this.workOrders = workOrders;\n                }\n\n                if (this.$router.context.route?.name === '/or/list') {\n                    const baseUrl = `/isiWeb/web/v1/empresas/01/ordenes-reparacion?almnro=${this.user.usuario}`;\n                    let fetchUrl = '';\n                    switch (this.currentTab) {\n                        case 0:\n                            fetchUrl = baseUrl;\n                            break;\n                        case 1:\n                            fetchUrl = `${baseUrl}&fecrep:eq=`;\n                            break;\n                        case 2:\n                            fetchUrl = `${baseUrl}&fecrep:ne=`;\n                            break;\n                    }\n                    const r = await fetch(url(fetchUrl), {\n                        credentials: 'include',\n                        headers: {\n                            'Content-Type': 'application/json',\n                        },\n                    });\n\n                    const response = await r.json();\n\n                    const workOrders = response.data as WorkOrder[];\n\n                    this.workOrders = workOrders;\n\n                    if (this.currentTab === 0) {\n                        this.totalWorkOrders = workOrders;\n                    }\n\n                    await this.loadKpis();\n                }\n            } catch (error: any) {\n                this.error = error.message;\n            }\n\n            this.loading = false;\n        },\n\n        async loadKpis() {\n            const today = new Date().toISOString().split('T')[0];\n\n            const yesterdayDate = new Date();\n            yesterdayDate.setDate(yesterdayDate.getDate() - 1);\n            const yesterday = yesterdayDate.toISOString().split('T')[0];\n\n            this.countTodayWorkOrders = this.totalWorkOrders.filter(\n                (wo: WorkOrder) => wo.fecrep === null && wo.fedoc === today,\n            ).length;\n            this.countYesterdayWorkOrders = this.totalWorkOrders.filter(\n                (wo: WorkOrder) => wo.fecrep === null && wo.fedoc === yesterday,\n            ).length;\n            this.percentageSinceYesterday =\n                this.countYesterdayWorkOrders > 0\n                    ? Math.round(\n                          ((this.countTodayWorkOrders - this.countYesterdayWorkOrders) /\n                              this.countYesterdayWorkOrders) *\n                              100,\n                      )\n                    : 0;\n\n            this.countTotalWorkOrders = this.totalWorkOrders.length;\n            this.countPendingWorkOrders = this.totalWorkOrders.filter((wo: WorkOrder) => wo.fecrep === null).length;\n            this.countClosedWorkOrders = this.totalWorkOrders.filter((wo: WorkOrder) => wo.fecrep !== null).length;\n\n            this.progressPercentage =\n                this.countTotalWorkOrders > 0\n                    ? Math.round(\n                          ((this.countTotalWorkOrders - this.countPendingWorkOrders) / this.countTotalWorkOrders) * 100,\n                      )\n                    : 0;\n\n            console.log('before chart');\n\n            // Group work orders by day and count them\n            const workOrdersByDay = this.totalWorkOrders.reduce(\n                (acc: { [key: string]: number }, workOrder: WorkOrder) => {\n                    if (!workOrder.fedoc) return acc;\n\n                    const dateKey = workOrder.fedoc;\n                    acc[dateKey] = (acc[dateKey] || 0) + 1;\n                    return acc;\n                },\n                {},\n            );\n\n            // Sort by date\n            const sortedDates = Object.keys(workOrdersByDay).sort(\n                (a, b) => new Date(a).getTime() - new Date(b).getTime(),\n            );\n\n            // Create categories (dates) and data (counts) arrays for the chart\n            const categories = sortedDates.map((date) => {\n                const dateObj = new Date(date);\n                const month = dateObj.getMonth() + 1;\n                return `${dateObj.getDate()}/${month < 10 ? '0' : ''}${month}/${dateObj.getFullYear()}`;\n            });\n\n            const data = sortedDates.map((date) => workOrdersByDay[date]);\n\n            console.log('categories and data', { categories, data });\n\n            const options = {\n                chart: {\n                    height: '100%',\n                    maxWidth: '100%',\n                    type: 'area',\n                    fontFamily: 'Inter, sans-serif',\n                    dropShadow: {\n                        enabled: false,\n                    },\n                    toolbar: {\n                        show: false,\n                    },\n                },\n                tooltip: {\n                    enabled: true,\n                    x: {\n                        show: false,\n                    },\n                },\n                fill: {\n                    type: 'gradient',\n                    gradient: {\n                        opacityFrom: 0.55,\n                        opacityTo: 0,\n                        shade: '#ed772d',\n                        gradientToColors: ['#ed772d'],\n                    },\n                },\n                dataLabels: {\n                    enabled: false,\n                },\n                stroke: {\n                    width: 6,\n                },\n                grid: {\n                    show: false,\n                    strokeDashArray: 4,\n                    padding: {\n                        left: 2,\n                        right: 2,\n                        top: 0,\n                    },\n                },\n                series: [\n                    {\n                        name: 'OR',\n                        data,\n                        color: '#ed772d',\n                    },\n                ],\n                xaxis: {\n                    categories,\n                    labels: {\n                        show: false,\n                    },\n                    axisBorder: {\n                        show: false,\n                    },\n                    axisTicks: {\n                        show: false,\n                    },\n                },\n                yaxis: {\n                    show: false,\n                },\n            };\n\n            const chartSelector = document.getElementById('area-chart');\n\n            if (chartSelector) {\n                const ApexCharts = (await import('apexcharts')).default;\n                const chart = new ApexCharts(chartSelector, options);\n                chart.render();\n            }\n        },\n\n        async changeTab() {\n            await this.loadWorkOrders();\n        },\n    }),\n} as ComponentModule<{\n    user: User;\n    loading: boolean;\n    totalWorkOrders: WorkOrder[];\n    workOrders: WorkOrder[];\n    countTodayWorkOrders: number;\n    countYesterdayWorkOrders: number;\n    percentageSinceYesterday: number;\n    countTotalWorkOrders: number;\n    countPendingWorkOrders: number;\n    countClosedWorkOrders: number;\n    progressPercentage: number;\n    currentTab: number;\n    loadWorkOrders: () => Promise<void>;\n    loadKpis: () => void;\n}>;\n"],"file":"assets/work-order-list-15sqdva8.js"}