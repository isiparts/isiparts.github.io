{"version":3,"mappings":"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","names":["workOrderNew","name","template","__vitePreload","import","__VITE_PRELOAD__","data","user","nav","aside","userMec","EmptyMec","cliente","fecdoc","newWorkOrder","workOrderCliente","modalSearchCliente","hasSearched","loadingClientes","selectedCliente","currentCliente","currentRaz","currentNom","currentCif","currentDir","clientes","clienteMetaData","currentPage","pageInfo","loading","submitting","init","console","log","this","getAuthenticatedUser","error","location","href","initModalSearchCliente","render","loadUserMec","forEach","field","$watch","length","resetValues","Modal","$refs","placement","backdrop","backdropClasses","closable","onHide","onShow","onToggle","id","override","r","fetch","url","usuario","credentials","headers","status","Error","$t","ok","statusText","response","json","message","openSearchClienteModal","searchCliente","_a","show","createWorkOrder","method","body","JSON","stringify","fedoc","cif","cli","dir","email","mec","$router","navigate","OR","$dispatch","TOAST_TRIGGER","msg","level","ToastError","selectCliente","setFormCliente","toString","hide","filter","buildFilter","slice","meta","startEntry","endEntry","Math","min","rows","buildCliente","e","target","value","_b","searchClienteInput","focus","appendFilter","existingFilter","key","minLength"],"ignoreList":[],"sources":["../../src/components/pages/work-orders/work-order-new/work-order-new.ts"],"sourcesContent":["import aside from '@/components/shared/aside/aside';\nimport nav from '@/components/shared/nav/nav';\nimport { ComponentModule, render } from '@/main';\nimport { Cliente, ClienteMetaData } from '@/models/cliente';\nimport { TOAST_TRIGGER } from '@/models/events';\nimport { EmptyMec, Mec } from '@/models/mec';\nimport { WorkOrder } from '@/models/or';\nimport { ToastError } from '@/models/toast';\nimport { User } from '@/models/user';\nimport { url } from '@/services/api.service';\nimport { getAuthenticatedUser } from '@/services/auth.service';\nimport { Modal } from 'flowbite';\n\nconst MIN_SEARCH_LENGTH = 2;\n\nexport default {\n    name: () => 'workOrderNew',\n    template: () => import('./work-order-new.html?raw'),\n    data: () => ({\n        user: null as User | null,\n        nav: null as string | null,\n        aside: null as string | null,\n\n        userMec: EmptyMec,\n\n        // campos formulario\n        cliente: '',\n        fecdoc: '',\n\n        newWorkOrder: null as WorkOrder | null,\n        workOrderCliente: null as Cliente | null,\n\n        // cliente modal búsqueda\n        modalSearchCliente: null as Modal | null,\n\n        // estados de modal búsqueda\n        hasSearched: false,\n        loadingClientes: false,\n\n        // cliente seleccionado modal búsqueda\n        selectedCliente: null as Cliente | null,\n\n        // filtros modal búsqueda\n        currentCliente: '',\n        currentRaz: '',\n        currentNom: '',\n        currentCif: '',\n        currentDir: '',\n\n        // resultados modal búsqueda\n        clientes: [] as Cliente[],\n        clienteMetaData: null as ClienteMetaData | null,\n\n        // paginación modal búsqueda\n        currentPage: 1,\n        pageInfo: '',\n\n        loading: true,\n        submitting: false,\n\n        async init() {\n            console.log('work-order-new@init');\n\n            try {\n                this.user = await getAuthenticatedUser();\n            } catch (error) {\n                location.href = '/login?redirect=/or/new';\n            }\n\n            this.initModalSearchCliente();\n\n            this.nav = await render(nav);\n            this.aside = await render(aside);\n\n            this.loading = false;\n\n            await this.loadUserMec();\n\n            const watchFields = ['currentCliente', 'currentRaz', 'currentNom', 'currentCif', 'currentDir'];\n            watchFields.forEach((field) => {\n                this.$watch(field, () => {\n                    if (!this.hasSearched) {\n                        this.hasSearched = true;\n                    }\n                    if (this.currentPage !== 1) {\n                        this.currentPage = 1;\n                    }\n                    if (\n                        this.currentCliente.length < 1 &&\n                        this.currentRaz.length < MIN_SEARCH_LENGTH &&\n                        this.currentNom.length < MIN_SEARCH_LENGTH &&\n                        this.currentCif.length < MIN_SEARCH_LENGTH &&\n                        this.currentDir.length < MIN_SEARCH_LENGTH\n                    ) {\n                        this.resetValues();\n                    }\n                });\n            });\n        },\n\n        initModalSearchCliente() {\n            this.modalSearchCliente = new Modal(\n                this.$refs.modalSearchCliente,\n                {\n                    placement: 'center',\n                    backdrop: 'static', // Prevent closing the client search modal when clicking outside\n                    backdropClasses: 'bg-gray-900/50 dark:bg-gray-900/80 fixed inset-0 z-40',\n                    closable: true,\n                    onHide: () => {\n                        console.log('modal is hidden');\n                        this.resetValues();\n                        // Reiniciamos los valores de los campos de búsqueda al cerrar el modal\n                        [this.currentCliente, this.currentRaz, this.currentNom, this.currentCif, this.currentDir] = [\n                            '',\n                            '',\n                            '',\n                            '',\n                            '',\n                        ];\n                    },\n                    onShow: () => {\n                        console.log('modal is shown');\n                    },\n                    onToggle: () => {\n                        console.log('modal is toggled');\n                    },\n                },\n                {\n                    id: 'modal-search-cliente',\n                    override: true,\n                },\n            );\n        },\n\n        async loadUserMec() {\n            try {\n                const r = await fetch(url(`/isiWeb/web/v1/empresas/01/mecanicos?usuario=${this.user.usuario}`), {\n                    credentials: 'include',\n                    headers: {\n                        'Content-Type': 'application/json',\n                    },\n                });\n\n                if (r.status === 404) {\n                    throw new Error(this.$t('WORKORDERS.mec_not_found'));\n                }\n\n                if (!r.ok) {\n                    throw new Error(this.$t(r.statusText));\n                }\n\n                const response = await r.json();\n\n                this.userMec = response.data[0] as Mec;\n            } catch (error: any) {\n                this.error = error.message;\n            }\n        },\n\n        async openSearchClienteModal() {\n            if (this.cliente !== '') {\n                this.currentCliente = this.cliente;\n                await this.searchCliente();\n            }\n            this.modalSearchCliente?.show();\n        },\n\n        resetValues() {\n            this.pageInfo = '';\n            this.clientes = [];\n            this.clienteMetaData = null;\n            this.hasSearched = false;\n            this.loadingClientes = false;\n        },\n\n        async createWorkOrder() {\n            try {\n                this.submitting = true;\n                if (!this.selectedCliente) {\n                    throw new Error(this.$t('CLIENT.not_found'));\n                }\n                const r = await fetch(url('/isiWeb/web/v1/empresas/01/ordenes-reparacion'), {\n                    credentials: 'include',\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                    },\n                    body: JSON.stringify({\n                        ...this.newWorkOrder,\n                        fedoc: this.fecdoc,\n                        cif: this.selectedCliente.cif,\n                        cli: this.selectedCliente.cli,\n                        dir: this.selectedCliente.dir,\n                        email: this.selectedCliente.email,\n                        mec: this.userMec.mec,\n                    } as WorkOrder),\n                });\n\n                if (!r.ok) {\n                    const response = await r.json();\n                    throw new Error(this.$t(response.message));\n                }\n                const response = await r.json();\n                this.submitting = false;\n                this.$router.navigate(`/or/${response.data.OR}/details`);\n                this.$dispatch(TOAST_TRIGGER, {\n                    msg: `Orden de reparación ${response.data.OR} creada correctamente`,\n                    level: 'success',\n                });\n            } catch (error: any) {\n                console.error(error);\n                this.$dispatch(TOAST_TRIGGER, { msg: error, level: ToastError });\n                this.submitting = false;\n            }\n        },\n\n        selectCliente(cliente: Cliente) {\n            this.selectedCliente = cliente;\n        },\n\n        setFormCliente() {\n            if (this.selectedCliente !== null) {\n                this.cliente = this.selectedCliente.cli.toString();\n                this.workOrderCliente = this.selectedCliente;\n                this.modalSearchCliente?.hide();\n            }\n        },\n\n        async searchCliente() {\n            const filter = this.buildFilter();\n\n            try {\n                if (filter !== '') {\n                    this.loadingClientes = true;\n                    const r = await fetch(url(`/isiWeb/web/v1/empresas/01/clientes?${filter}`), {\n                        credentials: 'include',\n                        headers: {\n                            'Content-Type': 'application/json',\n                        },\n                        method: 'GET',\n                    });\n\n                    if (!r.ok) {\n                        const response = await r.json();\n                        throw new Error(this.$t(response.message));\n                    }\n                    const response = await r.json();\n\n                    this.clientes = response.data.slice(0, 15) as Cliente[];\n                    this.clienteMetaData = response.meta as ClienteMetaData;\n\n                    const startEntry = (this.currentPage - 1) * 15 + 1;\n                    const endEntry = Math.min(this.currentPage * 15, this.clienteMetaData.rows);\n                    this.pageInfo = `Mostrando ${startEntry} a ${endEntry} de ${this.clienteMetaData.rows} registros`;\n                    this.loadingClientes = false;\n                }\n            } catch (error: any) {\n                console.error(error);\n                this.$dispatch(TOAST_TRIGGER, { msg: error, level: ToastError });\n            }\n        },\n\n        async buildCliente(e: Event) {\n            const cliente = (e.target as HTMLInputElement).value;\n\n            try {\n                this.workOrderCliente = null;\n                if (cliente !== '') {\n                    this.loadingClientes = true;\n                    const r = await fetch(url(`/isiWeb/web/v1/empresas/01/clientes/${cliente}`), {\n                        credentials: 'include',\n                        headers: {\n                            'Content-Type': 'application/json',\n                        },\n                        method: 'GET',\n                    });\n\n                    if (!r.ok) {\n                        const response = await r.json();\n                        if (this.selectedCliente) {\n                            this.selectedCliente = null;\n                        }\n                        throw new Error(this.$t(response.message));\n                    }\n                    const response = await r.json();\n\n                    this.selectedCliente = response.data as Cliente;\n                    this.workOrderCliente = this.selectedCliente;\n                    this.clienteMetaData = response.meta as ClienteMetaData;\n                    this.loadingClientes = false;\n                }\n            } catch (error: any) {\n                console.error(error);\n                this.$dispatch(TOAST_TRIGGER, { msg: error, level: ToastError });\n                this.loadingClientes = false;\n                this.modalSearchCliente?.show();\n                this.$refs.searchClienteInput?.focus();\n            }\n        },\n\n        buildFilter(): string {\n            let filter = '';\n\n            filter = this.appendFilter(filter, this.currentCliente, 'cli', 1);\n            filter = this.appendFilter(filter, this.currentRaz, 'raz', MIN_SEARCH_LENGTH);\n            filter = this.appendFilter(filter, this.currentNom, 'nom', MIN_SEARCH_LENGTH);\n            filter = this.appendFilter(filter, this.currentCif, 'cif', MIN_SEARCH_LENGTH);\n            filter = this.appendFilter(filter, this.currentDir, 'dir', MIN_SEARCH_LENGTH);\n\n            return filter;\n        },\n\n        appendFilter(existingFilter: string, value: string, key: string, minLength: number): string {\n            let filter = existingFilter;\n            if (value.length >= minLength) {\n                if (filter !== '') {\n                    filter += key === 'cli' ? `&${key}:=${value}` : `&${key}:like=${value}`;\n                } else {\n                    filter += key === 'cli' ? `${key}:=${value}` : `${key}:like=${value}`;\n                }\n            }\n            return filter;\n        },\n    }),\n} as ComponentModule;\n"],"file":"assets/work-order-new-D66ioN4m.js"}